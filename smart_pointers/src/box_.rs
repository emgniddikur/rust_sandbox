//! # Box
//!
//! 間接参照とヒープメモリ確保だけを行う
//!
//! `Box<T>`を使うことでヒープ上にデータを格納できる。スタックに残るのはヒープデータへのポインタ
//!
//! データをヒープ上に格納する以外はオーバーヘッドはない
//!
//! メモリの解放は、スタックに格納されているボックスと、ヒープに格納されている参照先のデータに対して起きる
//!
//! ## 用途
//!
//! - コンパイル時にはサイズのわからない型を、サイズを要求するコンテキストで使う場合
//! - データをコピーせず、多くのデータの所有権を移したい場合
//! - 特定のトレイトを実装する型の値を所有したい場合（トレイトオブジェクト）

enum List<T> {
    Cons(T, Box<List<T>>),
    Nil,
}

pub fn main() {
    let _list = List::Cons(
        1,
        Box::new(List::Cons(2, Box::new(List::Cons(3, Box::new(List::Nil))))),
    );
}
